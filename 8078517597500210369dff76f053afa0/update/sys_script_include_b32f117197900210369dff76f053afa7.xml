<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.CMDBBatchSync</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CMDBBatchSync</name>
        <script><![CDATA[var CMDBBatchSync = Class.create();
CMDBBatchSync.TABLE = 'u_data_driven_definition';
CMDBBatchSync.PROPERTIES = {
    BATCHSIZE: 'batchsize.data.driven',
    ENABLE_PUSHING: 'enable.pushing',
    TARGET_INSTANCE: 'target.instance',
    PUSHING_CREDENTIAL_ID: 'pushing.credential.id'
};
CMDBBatchSync.prototype = {

    initialize: function() {
        this.payload;
		this.refPayload;
    },
    /**
     * Process and push data from the source instance to the target instance based on data driven definition table  
     */
    pushData: function() {
        if (this.canPush()) {
            var batchSize = gs.getProperty(CMDBBatchSync.PROPERTIES.BATCHSIZE);
            var batch = [];
            var tableGR = new GlideRecord(CMDBBatchSync.TABLE);
            tableGR.addActiveQuery();
            tableGR.orderByDesc('u_order');
            tableGR.query();

            while (tableGR.next()) {
                try {
                    var cmdbTable = JSON.parse(tableGR.getValue('u_configuration'));
                    for (obj in cmdbTable) {
                        var sourTable = cmdbTable[obj]['sourceTable'];
                        gs.log(sourTable);
                        gs.log(JSON.stringify(cmdbTable));
                        var refTables = [];
                        for (var keys in cmdbTable[obj]) {
                            if (keys.startsWith('refTable')) {
                                refTables.push(cmdbTable[obj][keys]);
                                gs.log("Reference field is " + cmdbTable[obj][keys]);
                            }

                        }
                        var searchGR = new GlideRecord(sourTable);
                        searchGR.query();
                        while (searchGR.next()) {
                            this.mainVerification(searchGR, sourTable, refTables);
                        }
                    }
                } catch (e) {
                    gs.error(e);
                }
            }
        }
    },
    /**
     * Verify if data pushing is enabled
     * returns {boolean} true if pushing is enables otherwise false
     */
    canPush: function() {
        return gs.getProperty(CMDBBatchSync.PROPERTIES.ENABLE_PUSHING) == 'true';
    },
    /**
     * Create the cmdbPayload for the cmdb records to be pushed to the target instance
     * cmdbGR {GlideRecord} represents CMDB record
     * cmdbClass {String} represents the name of the cmdb class
     * returns {Object} cmdbPayload Object with coresponding fields values
     */
    createPayload: function(cmdbGR, cmdbClass) {
        var cmdbPayload = {};
        var dictionaryGR = new GlideRecord('sys_dictionary');
        dictionaryGR.addQuery('name', cmdbClass);
        dictionaryGR.query();
        while (dictionaryGR.next()) {
            var fieldName = dictionaryGR.getValue('element');
            if (cmdbGR.isValidField(fieldName)) {
                var fieldValue = cmdbGR.getValue(fieldName);
                cmdbPayload[fieldName] = fieldValue;
            }
        }
        cmdbPayload['correlation_id'] = cmdbGR.getUniqueValue();
        return cmdbPayload;
    },
    /**
     * Create array of all reference fields for the cmdb class
     * cmdbClass {String} represents the name of the cmdb class
     * returns {Array} array of reference field names
     */
    createRefeArray: function(cmdbClass, refTables, instanceGR) {
        var referenceArray = [];
        var dictionaryGR = new GlideRecord('sys_dictionary');
        dictionaryGR.addQuery('name', cmdbClass);
        dictionaryGR.query();
        while (dictionaryGR.next()) {
            var fieldType = dictionaryGR.getDisplayValue('internal_type');
            var fieldName = dictionaryGR.getValue('element');
            if (fieldType == "Reference" && refTables.includes(instanceGR[fieldName].getReferenceTable())) {
                referenceArray.push(fieldName);
            }
        }
        return referenceArray;

    },
    /**
     * 
     * Make the REST Api call for a specific CMDB record
     * instanceGR {GlideRecord} represents CMDB record
     * cmdbClass {String} represents the name of the cmdb class
     * 
     */
    syncData: function(instanceGR, cmdbClass, refTables) {
        try {
            var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + "/" + instanceGR.getUniqueValue();
            var httpsStatus = this.constructRESTCall(url, 'PUT', instanceGR, cmdbClass);
            var referenceArray = this.createRefeArray(cmdbClass, refTables, instanceGR);
            gs.log(JSON.stringify(referenceArray), "", 2);
            this.syncRefData(referenceArray, instanceGR, cmdbClass, refTables);
        } catch (e) {
            gs.error(e);
        }
    },
    /** 
     * Make the REST Api calls for the referenced records from cmdb instance
     * referenceArray {Array} array of reference field names
     * instanceGR {GlideRecord} represents CMDB record
     */
    syncRefData: function(referenceArray, instanceGR, cmdbClass, refTables) {
        try {
            for (var i = 0; i < referenceArray.length; i++) {
                var reqObj = {};
                var field = referenceArray[i];
                var refRecord = instanceGR[field].getRefRecord();
                if (refRecord.isValidRecord()) {
                    var refTable = instanceGR[field].getReferenceTable();
                    for (var keys in refRecord) {
                        var fieldValue = refRecord.getValue(keys);
                        reqObj[keys] = fieldValue;
                    }
					this.refPayload = reqObj;
					var name = encodeURIComponent(refRecord.getValue('name'));
                    var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + refTable + '?sysparm_query=name%3D' + name;
					gs.log("URL ref get: " +url);
					var returnObj = this.constructRESTCall(url, 'GET', refRecord, refTable);
                    var httpsStatus = returnObj['httpsStatus'];
					var responseBody = returnObj['responseBody'];
					gs.log("responsebody.length: " + responseBody.length);
                    if (httpsStatus == 200 && responseBody.length == 0 || httpsStatus == 201 && responseBody.length == 0) {
						putUrl = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '/' + instanceGR.getUniqueValue();
                        this.constructRESTCall(putUrl, 'PUT', this.refPayload, cmdbClass);
						gs.log("URL ref PUT: " + putUrl);
                    } else {
                        var postUrl = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + refTable;
                        var postResult = this.constructRESTCall(postUrl, 'POST', refRecord, refTable);

                        this.payload[field] = postResult.sys_id;
                        var instanceUrl = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '/' + instanceGR.getUniqueValue();
                        this.constructRESTCall(instanceUrl, 'PUT', this.refPayload, cmdbClass);
                    }
                }
            }
            var nestedReferenceArray = this.createRefeArray(refTable, refTables, refRecord);
            if (nestedReferenceArray.length) {
                gs.log(JSON.stringify(nestedReferenceArray));
                this.syncRefData(nestedReferenceArray, refRecord, refTable, refTables);
            }
        } catch (e) {
            gs.error(e);
        }
    },

    postData: function(instanceGR, cmdbClass) {
        try {
            var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass;
            var httpsStatus = this.constructRESTCall(url, 'POST', instanceGR, cmdbClass);
        } catch (e) {
            gs.error(e);
        }
    },

    mainVerification: function(instanceGR, cmdbClass, refTables) {
        try {
            var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '?sysparm_query=correlation_id%' + instanceGR.getUniqueValue();
            gs.log("GET url is " + url);
            this.payload = this.createPayload(instanceGR, cmdbClass);
            var returnObj = this.constructRESTCall(url, 'GET', instanceGR, cmdbClass);
            var httpsStatus = returnObj.httpsStatus;
            if (httpsStatus == 200) {
                this.syncData(instanceGR, cmdbClass, refTables);
            } else {
                this.postData(instanceGR, cmdbClass);
            }
        } catch (e) {
            gs.error(e);
        }
    },

    constructRESTCall: function(url, method, instanceGR, cmdbClass) {
        var provider = new sn_cc.StandardCredentialsProvider();
        var credentials = provider.getCredentialByID(gs.getProperty(CMDBBatchSync.PROPERTIES.PUSHING_CREDENTIAL_ID));
        var user = credentials.getAttribute("user_name");
        var pass = credentials.getAttribute("password");
        var request = new sn_ws.RESTMessageV2();
        request.setBasicAuth(user, pass);
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader('Content-Type', 'application/json');
        //request.setEndpoint(url);
        request.setHttpMethod(method);
        gs.log(method);
        if ((method == 'PUT' && cmdbClass.includes('cmdb_ci')) || (method == 'POST' && cmdbClass.includes('cmdb_ci'))) {
            request.setRequestBody(JSON.stringify(this.payload));
        }else if(method == 'PUT' || method == 'POST') {
			request.setRequestBody(JSON.stringify(this.refPayload));
		}
        if (method == 'GET' && cmdbClass.includes('cmdb_ci')) {
            url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '?sysparm_query=correlation_id%' + instanceGR.getUniqueValue();
        } else if (method == 'GET') {
            var name = encodeURIComponent(instanceGR.getValue('name'));
            url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '?sysparm_query=name%3D' + name;
        }
		request.setEndpoint(url);
        response = request.execute();
        var responseBody = response.getBody();
        var httpsStatus = response.getStatusCode();
		gs.log('HTTP Status Code: ' + httpsStatus + ", Method = " + method + ", URL = " + url);
        var returnObj = {
            httpsStatus: httpsStatus,
            sys_id: null,
			responseBody: responseBody
        };
        if (method == 'POST') {
            try {
                var responseObj = JSON.parse(responseBody);
                gs.log("Response obj is " + JSON.stringify(responseObj), "", 2);
                returnObj.sys_id = responseObj['result']['sys_id'];
                gs.log("Sys_id for created/updated record is: " + returnObj.sys_id);
            } catch (e) {
                gs.error(e);
            }
        }
        return returnObj;
    },
    type: 'CMDBBatchSync'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>magda.gursca</sys_created_by>
        <sys_created_on>2024-02-12 08:10:20</sys_created_on>
        <sys_id>b32f117197900210369dff76f053afa7</sys_id>
        <sys_mod_count>300</sys_mod_count>
        <sys_name>CMDBBatchSync</sys_name>
        <sys_package display_value="Data Driven Definition" source="8078517597500210369dff76f053afa0">8078517597500210369dff76f053afa0</sys_package>
        <sys_policy/>
        <sys_scope display_value="Data Driven Definition">8078517597500210369dff76f053afa0</sys_scope>
        <sys_update_name>sys_script_include_b32f117197900210369dff76f053afa7</sys_update_name>
        <sys_updated_by>magda.gursca</sys_updated_by>
        <sys_updated_on>2024-02-19 16:32:25</sys_updated_on>
    </sys_script_include>
</record_update>
