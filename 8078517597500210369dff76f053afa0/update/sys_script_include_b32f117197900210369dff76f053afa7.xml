<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.CMDBBatchSync</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CMDBBatchSync</name>
        <script><![CDATA[var CMDBBatchSync = Class.create();
CMDBBatchSync.TABLE = 'u_data_driven_definition';
CMDBBatchSync.PROPERTIES = {
    LOGGING: 'enable.logging',
    BATCHSIZE: 'batchsize.data.driven',
    ENABLE_PUSHING: 'enable.pushing',
    TARGET_INSTANCE: 'target.instance',
    PUSHING_CREDENTIAL_ID: 'pushing.credential.id'
};
CMDBBatchSync.prototype = {

    initialize: function() {
        this.payload;
        this.refPayload;
        this.targetID = "";
        this.nestedLevel = 0;
    },
    /**
     * Process and push data from the source instance to the target instance based on data driven definition table
     *   
     */
    pushData: function() {
        if (this.canPush()) {
            var batchSize = gs.getProperty(CMDBBatchSync.PROPERTIES.BATCHSIZE);
            var batch = [];
            var tableGR = new GlideRecord(CMDBBatchSync.TABLE);
            tableGR.addActiveQuery();
            tableGR.orderByDesc('u_order');
            tableGR.query();

            while (tableGR.next()) {
                try {
                    var cmdbTable = JSON.parse(tableGR.getValue('u_configuration'));
                    for (obj in cmdbTable) {
                        var sourTable = cmdbTable[obj]['sourceTable'];
                        var refTables = [];
                        for (var keys in cmdbTable[obj]) {
                            if (keys.startsWith('refTable')) {
                                refTables.push(cmdbTable[obj][keys]);
                            }

                        }
                        var searchGR = new GlideRecord(sourTable);
                        searchGR.query();
                        while (searchGR.next()) {
                            this.mainVerification(searchGR, sourTable, refTables);
                        }
                    }
                } catch (e) {
                    gs.error(e);
                }
            }
        }
    },
    /**
     * Verify if data pushing is enabled
     * 
     * @returns {boolean} true if pushing is enables otherwise false
     * 
     */
    canPush: function() {
        return gs.getProperty(CMDBBatchSync.PROPERTIES.ENABLE_PUSHING) == 'true';
    },
    /**
     * Create the cmdbPayload for the cmdb records to be pushed to the target instance
     * 
     * @cmdbGR {GlideRecord} represents CMDB record
     * @cmdbClass {String} represents the name of the cmdb class
     * @returns {Object} cmdbPayload Object with coresponding fields values
     * 
     */
    createPayload: function(cmdbGR, cmdbClass) {
        var cmdbPayload = {};
        var dictionaryGR = new GlideRecord('sys_dictionary');
        dictionaryGR.addQuery('name', cmdbClass);
        dictionaryGR.query();
        while (dictionaryGR.next()) {
            var fieldName = dictionaryGR.getValue('element');
            if (cmdbGR.isValidField(fieldName)) {
                var fieldValue = cmdbGR.getValue(fieldName);
                cmdbPayload[fieldName] = fieldValue;
            }
        }
        cmdbPayload['correlation_id'] = cmdbGR.getUniqueValue();
        return cmdbPayload;
    },
    /**
     * Create array of all reference fields for the cmdb class
     * 
     * @cmdbClass {String} represents the name of the cmdb class
     * @returns {Array} array of reference field names
     * @refTables
     * 
     */
    createRefeArray: function(cmdbClass, refTables, instanceGR) {
        var referenceArray = [];
        var dictionaryGR = new GlideRecord('sys_dictionary');
        dictionaryGR.addQuery('name', cmdbClass);
        dictionaryGR.query();
        while (dictionaryGR.next()) {
            var fieldType = dictionaryGR.getDisplayValue('internal_type');
            var fieldName = dictionaryGR.getValue('element');
            if (fieldType == "Reference" && refTables.includes(instanceGR[fieldName].getReferenceTable())) {
                referenceArray.push(fieldName);
            }
        }
        return referenceArray;

    },
    /**
     * Make the REST API call for a specific CMDB record
     * 
     * @instanceGR {GlideRecord} represents CMDB record
     * @cmdbClass {String} represents the name of the cmdb class
     * @refTables {Array} array of reference tables name
     * 
     */
    syncData: function(instanceGR, cmdbClass, refTables) {
        try {
            var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + "/" + instanceGR.getUniqueValue();
            var referenceArray = this.createRefeArray(cmdbClass, refTables, instanceGR);
            this.setlogging('log', "Reference Tables: " + JSON.stringify(referenceArray), "", 2);
            this.syncRefData(referenceArray, instanceGR, cmdbClass, refTables);
            this.executeRESTCall(url, 'PUT', this.payload, cmdbClass);
        } catch (e) {
            gs.error(e);
        }
    },
    /** 
     * Make the REST API calls for the referenced records from cmdb instance
     * 
     * @referenceArray {Array} array of reference field names
     * @instanceGR {GlideRecord} represents CMDB record
     * @cmdbClass {String} represents the name of the cmdb class
     * @refTables {Array} array of reference tables names
     * 
     */
    syncRefData: function(referenceArray, instanceGR, cmdbClass, refTables, nestedLevel) {
		
        this.setlogging('log', "ReferenceArray: " + referenceArray);
        try {
            for (var i = 0; i < referenceArray.length; i++) {
                var referencePayload = {};
                var field = referenceArray[i];
                var refRecord = instanceGR[field].getRefRecord();
                if (refRecord.isValidRecord()) {
                    var refTable = instanceGR[field].getReferenceTable();
                    for (var keys in refRecord) {
                        var fieldValue = refRecord.getValue(keys);
                        referencePayload[keys] = fieldValue;
                    }
                    this.refPayload = referencePayload;
                    var name = encodeURIComponent(refRecord.getValue('name'));
                    var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + refTable + '?sysparm_query=name%3D' + name;
                    var returnObj = this.executeRESTCall(url, 'GET', refRecord, refTable);
                    this.setlogging('log', "ResponseBody result length is: " + returnObj.responseBody.result.length);
                    if (returnObj.responseBody.result.length == 0) {
                        var postUrl = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + refTable;
                        var postResponse = this.executeRESTCall(postUrl, 'POST', refRecord, refTable);
                        this.payload[field] = postResponse.responseBody.result.sys_id;
                        this.setlogging('log', "New sys_id is: " + postResponse.responseBody.result.sys_id);
                    } else {
                        this.targetID = returnObj.responseBody.result[0].sys_id;
                        this.payload[field] = this.targetID;
                    }
                    //this.nestedLevel = nestedLevel;
                }
            }
            var nestedReferenceArray = this.createRefeArray(refTable, refTables, refRecord);
            this.setlogging('log', "Nested Reference Array: " + JSON.stringify(nestedReferenceArray));
            if (nestedReferenceArray.length > 0) {
                //this.setlogging('log', "Found nested reference array at level: " + nestedLevel);
                this.syncRefData(nestedReferenceArray, refRecord, refTable, refTables, nestedLevel + 1);
            }
        } catch (e) {
            gs.error(e);
        }
    },
    /** 
     * Make the REST API push call for the cmdb ci
     * 
     * @instanceGR {GlideRecord} represents CMDB record
     * @cmdbClass {String} represents the name of the cmdb class
     * 
     */
    postData: function(instanceGR, cmdbClass) {
        try {
            var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass;
            var httpsStatus = this.executeRESTCall(url, 'POST', instanceGR, cmdbClass);
        } catch (e) {
            gs.error(e);
        }
    },
    /** 
     * Verify which REST API Method need to be used for syncronization
     * 
     * @instanceGR {GlideRecord} represents CMDB record
     * @cmdbClass {String} represents the name of the cmdb class
     * @refTables {Array} array of reference tables names
     * 
     */
    mainVerification: function(instanceGR, cmdbClass, refTables) {
        try {
            var url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '?sysparm_query=correlation_id%' + instanceGR.getUniqueValue();
            this.payload = this.createPayload(instanceGR, cmdbClass);
            var returnObj = this.executeRESTCall(url, 'GET', instanceGR, cmdbClass);
            if (returnObj != null) {
                this.syncData(instanceGR, cmdbClass, refTables);
            } else {
                this.postData(instanceGR, cmdbClass);
            }
        } catch (e) {
            gs.error(e);
        }
    },
    /** 
     * Verify which REST API Method need to be used for syncronization
     * 
     * @url {URL} represents the URL for the REST Call
     * @instanceGR {GlideRecord} represents CMDB record
     * @cmdbClass {String} represents the name of the cmdb class
     * 
     */
    executeRESTCall: function(url, method, instanceGR, cmdbClass) {
        var provider = new sn_cc.StandardCredentialsProvider();
        var credentials = provider.getCredentialByID(gs.getProperty(CMDBBatchSync.PROPERTIES.PUSHING_CREDENTIAL_ID));
        var user = credentials.getAttribute("user_name");
        var pass = credentials.getAttribute("password");
        var request = new sn_ws.RESTMessageV2();
        request.setBasicAuth(user, pass);
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader('Content-Type', 'application/json');
        request.setHttpMethod(method);
        if ((method == 'PUT' && cmdbClass.includes('cmdb_ci')) || (method == 'POST' && cmdbClass.includes('cmdb_ci'))) {
            request.setRequestBody(JSON.stringify(this.payload));
        } else if (method == 'PUT' || method == 'POST') {
            request.setRequestBody(JSON.stringify(this.refPayload));
        }
        if (method == 'GET' && cmdbClass.includes('cmdb_ci')) {
            url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '?sysparm_query=correlation_id%' + instanceGR.getUniqueValue();
        } else if (method == 'GET') {
            var name = encodeURIComponent(instanceGR.getValue('name'));
            url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbClass + '?sysparm_query=name%3D' + name;
        }
        request.setEndpoint(url);
        response = request.execute();
        var responseBody = JSON.parse(response.getBody());
        var httpsStatus = response.getStatusCode();
        if (responseBody == null) {
            return null;
        }
        return {
            'responseBody': responseBody,
            'httpsStatus': httpsStatus
        };
    },
    /**
     * Set logging for other functions in the Script Include
     * @method setlogging
     * @param {String} verbosity - String value for the verbosity of the logs
     * @param {String} Message that is logged
     * @returns
     *
     */
    setlogging: function(verbosity, message) {
        if (gs.getProperty(CMDBBatchSync.PROPERTIES.LOGGING === "true")) return;
        switch (verbosity) {
            case "error":
                gs.error(message);
                break;
            case "warn":
                gs.warn(message);
                break;
            case "log":
                gs.log(message);
                break;
            case "debug":
                gs.debug(message);
                break;
            default:
                break;
        }
    },
    type: 'CMDBBatchSync'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>magda.gursca</sys_created_by>
        <sys_created_on>2024-02-12 08:10:20</sys_created_on>
        <sys_id>b32f117197900210369dff76f053afa7</sys_id>
        <sys_mod_count>405</sys_mod_count>
        <sys_name>CMDBBatchSync</sys_name>
        <sys_package display_value="Data Driven Definition" source="8078517597500210369dff76f053afa0">8078517597500210369dff76f053afa0</sys_package>
        <sys_policy/>
        <sys_scope display_value="Data Driven Definition">8078517597500210369dff76f053afa0</sys_scope>
        <sys_update_name>sys_script_include_b32f117197900210369dff76f053afa7</sys_update_name>
        <sys_updated_by>magda.gursca</sys_updated_by>
        <sys_updated_on>2024-02-21 06:01:18</sys_updated_on>
    </sys_script_include>
</record_update>
