<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.NestedLVLSync</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>NestedLVLSync</name>
        <script><![CDATA[var NestedLVLSync = Class.create();
NestedLVLSync.TABLE = 'u_data_driven_definition';
NestedLVLSync.PROPERTIES = {
    LOGGING: 'enable.logging',
    BATCHSIZE: 'batchsize.data.driven',
    ENABLE_PUSHING: 'enable.pushing',
    TARGET_INSTANCE: 'target.instance',
    PUSHING_CREDENTIAL_ID: 'pushing.credential.id'
};
NestedLVLSync.prototype = {
    initialize: function(process) {
        this.process = process || {};
        this.payload = {};
        this.nestedLevel;
    },
    /**
     * Process and push data from the source instance to the target instance based on data driven definition table
     *@returns {void}   
     */
    pushData: function() {
        if (this.canPush()) {
            var batchSize = gs.getProperty(NestedLVLSync.PROPERTIES.BATCHSIZE);
            var batch = [];
            var tableGR = new GlideRecord(NestedLVLSync.TABLE);
            tableGR.addQuery('u_active', true);
            tableGR.orderByDesc('u_order');
            tableGR.query();

            while (tableGR.next()) {
                try {
                    var cmdbTable = JSON.parse(tableGR.getValue('u_configuration'));
                    this.nestedLevel = JSON.parse(tableGR.getValue('u_nested_level'));
                    for (obj in cmdbTable) {
                        var sourTable = cmdbTable[obj]['sourceTable'];
                        var refTables = [];
                        for (var keys in cmdbTable[obj]) {
                            if (keys.startsWith('refTable')) {
                                refTables.push(cmdbTable[obj][keys]);
                            }

                        }
                        var searchGR = new GlideRecord(sourTable);
                        if (sourTable.includes('cmdb_ci')) {
                            if (this.process.lastCreated) {
                                searchGR.orderByDesc('sys_created_on');
                                searchGR.setLimit(1);
                            }
							if (this.process.lastUpdated) {
                                searchGR.orderByDesc('sys_updated_on');
                                searchGR.setLimit(1);
                            }
                        }
                        searchGR.query();
                        while (searchGR.next()) {
                            this.syncData(searchGR, sourTable, refTables);
                        }
                    }
                } catch (e) {
                    gs.error(e);
                }
            }
        }
    },
    /**
     * Verify if data pushing is enabled
     * 
     * @returns {boolean} true if pushing is enables otherwise false
     * 
     */
    canPush: function() {
        return gs.getProperty(NestedLVLSync.PROPERTIES.ENABLE_PUSHING) == 'true';
    },
    /**
     * Creates an object representation of all reference fields for a given CMDB class, its records and update the cmdb_ci payload.
     * 
     * @refTables {Array} The array of reference tables' names.
     * @currentGR {GlideRecord} The current GlideRecord being processed.
     * @currentNestedLevel {Number} The current level of nesting in the data structure.
     * @returns {Object} An object representing the nested references.
     * 
     */
    createMetaData: function(refTables, currentGR, currentNestedLevel) {
        this.setlogging('info', "Starting createReferenceObject with nested level: " + currentNestedLevel);

        var referenceObject = {};
        if (currentNestedLevel > this.nestedLevel) {
            return;
        }
        var fieldList = new GlideRecordUtil().getFields(currentGR);
        for (var i = 0; i < fieldList.length; i++) {

            var fieldName = fieldList[i];
            var fieldValue = currentGR[fieldName];

            if (fieldValue.getED().getInternalType() == 'reference' && refTables.includes(fieldValue.getReferenceTable())) {
                var refRecord = currentGR[fieldName].getRefRecord();
                if (refRecord.isValidRecord()) {
                    var dataObject = this.createMetaData(refTables, refRecord, currentNestedLevel + 1);
                    if (currentNestedLevel < this.nestedLevel) {
                        var metaObject = {
                            sys_class_name: refRecord.getTableName(),
                            nestedLevel: currentNestedLevel + 1,
                            sourceInstanceSysID: refRecord.getUniqueValue(),
                            targetInstanceSysID: ""
                        };
                        this.setlogging('info', "Meta Object is " + JSON.stringify(metaObject, "", 2));
                        this.setlogging('info', "Data Object is " + JSON.stringify(dataObject, "", 2));
                        referenceObject[fieldName] = {
                            meta: metaObject,
                            data: dataObject
                        };
                    }
                }
            } else {
                referenceObject[fieldName] = currentGR[fieldName].getDisplayValue() != '' ? currentGR[fieldName].getDisplayValue() : null;
                if (currentGR.getTableName().includes('cmdb_ci')) {
                    this.payload[fieldName] = currentGR[fieldName].getDisplayValue() != '' ? currentGR[fieldName].getDisplayValue() : null;
                }
                if (currentGR.getTableName().includes('cmdb_ci') && (fieldName == 'correlation_id')) {
                    this.payload[fieldName] = currentGR.getUniqueValue();
                }

            }
        }
        return referenceObject;
    },
    /**
     * Synchronizes data from CMDB CI and reference records between instances.
     * 
     * @cmdbGR {GlideRecord} The GlideRecord of the CMDB record.
     * @cmdbTableName {String} The name of the CMDB table.
     * @refTables {Array} The array of reference tables' names.
     * @returns {void}
     * 
     */
    syncData: function(cmdbGR, cmdbTableName, refTables) {
        try {
            var masterData = this.createMetaData(refTables, cmdbGR, 0);
            this.setlogging('info', "masterData: " + JSON.stringify(masterData, "", 2));
            this.processData(masterData, "");
            var url = gs.getProperty(NestedLVLSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbTableName + '?sysparm_query=correlation_id%' + cmdbGR.getUniqueValue();
            var returnObj = this.executeRESTCall(url, 'GET', cmdbGR, cmdbTableName);
            if (returnObj == null) {
                url = gs.getProperty(NestedLVLSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbTableName;
                this.executeRESTCall(url, 'POST', this.payload, cmdbTableName);
            } else {
                url = gs.getProperty(CMDBBatchSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + cmdbTableName + "/" + cmdbGR.getUniqueValue();
                this.executeRESTCall(url, 'PUT', this.payload, cmdbTableName);
            }
        } catch (e) {
            gs.error(e);
        }
    },
    /**
     * Processes nested data for synchronization.
     * 
     * @masterData {Object} The master data object to process.
     * @path {String} The current path within the nested data structure(e.g. department.dept_head.sys_user).
     * 
     */
    processData: function(masterData, path) {
        for (var key in masterData) {
            var item = masterData[key];
            if (typeof item == 'object' && item !== null && item.meta && item.data) {
                this.setlogging('info', "Processing nested reference for: " + key);
                this.processData(item.data, path + key + ".");
                this.syncReferenceData(item, item.meta.sys_class_name, path + key);
            }
        }
    },
    /**
     * Synchronizes reference data for a specific table and path and update the reference fields values for the CMDB CI payload.
     * 
     * @item {Object} The item to synchronize.
     * @refTable {String} The reference table name.
     * @path {String} The path within the nested data structure(e.g. department.dept_head.sys_user).
     * @returns {void}
     */
    syncReferenceData: function(item, refTable, path) {
        var payload = item.data;
        for (var key in payload) {
            if (typeof payload[key] == 'object' && payload[key] !== null) {
                payload[key] = item.data[key].meta.sourceInstanceSysID;
            }
        }
        this.setlogging('info', "Sync data for table: " + refTable + " at path: " + path + " with payload: " + JSON.stringify(payload, "", 2));
        var name = encodeURIComponent(payload['name']);
        var url = gs.getProperty(NestedLVLSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + refTable + '?sysparm_query=name%3D' + name;
        var returnObj = this.executeRESTCall(url, 'GET', payload, refTable);
        this.setlogging('info', "Return obj for reference record" + JSON.stringify(returnObj));
        if (returnObj == null) {
            var postUrl = gs.getProperty(NestedLVLSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + refTable;
            var postResponse = this.executeRESTCall(postUrl, 'POST', payload, refTable);
            this.setlogging('info', "Post response for reference table" + JSON.stringify(postResponse) + ",table:" + refTable);
            this.setlogging('info', "New POST sys_id is: " + postResponse.responseBody.result.sys_id);
            item.meta.targetInstanceSysID = postResponse.responseBody.result.sys_id;
            this.payload[path] = postResponse.responseBody.result.sys_id;
        }
        if (returnObj) {
            this.setlogging("info", "returnObj.responseBody.result[0].sys_id " + returnObj.responseBody.result[0].sys_id);
            var putUrl = gs.getProperty(NestedLVLSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + refTable + '/' + returnObj.responseBody.result[0].sys_id;
            var putResponse = this.executeRESTCall(putUrl, 'PUT', payload, refTable);
            this.payload[path] = returnObj.responseBody.result[0].sys_id;
        }
    },
    /** 
     * Construct and execute REST API Call that needs to be used for syncronization
     * 
     * @url {String} The URL for the REST call.
     * @method {String} The HTTP method (e.g., GET, POST).
     * @payload {Object} The payload for the REST call.
     * @tableName {String} The name of the current table.
     * @returns {Object} The response from the REST call.
     * 
     */
    executeRESTCall: function(url, method, payload, tableName) {
        var provider = new sn_cc.StandardCredentialsProvider();
        var credentials = provider.getCredentialByID(gs.getProperty(NestedLVLSync.PROPERTIES.PUSHING_CREDENTIAL_ID));
        var user = credentials.getAttribute("user_name");
        var pass = credentials.getAttribute("password");
        var request = new sn_ws.RESTMessageV2();
        request.setBasicAuth(user, pass);
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader('Content-Type', 'application/json');
        request.setHttpMethod(method);
        if ((method == 'PUT' && tableName.includes('cmdb_ci')) || (method == 'POST' && tableName.includes('cmdb_ci'))) {
            request.setRequestBody(JSON.stringify(payload));
        } else if (method == 'PUT' || method == 'POST') {
            request.setRequestBody(JSON.stringify(payload));
        }
        if (method == 'GET' && tableName.includes('cmdb_ci')) {
            url = gs.getProperty(NestedLVLSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + tableName + '?sysparm_query=correlation_id%3D' + payload['sys_id'];
        } else if (method == 'GET') {
            var name = encodeURIComponent(payload['name']);
            url = gs.getProperty(NestedLVLSync.PROPERTIES.TARGET_INSTANCE) + '/api/now/table/' + tableName + '?sysparm_query=name%3D' + name;
        }

        request.setEndpoint(url);
        var response = request.execute();
        var responseBody = JSON.parse(response.getBody());
        var httpsStatus = response.getStatusCode();
        if (method == 'GET' && responseBody.result.length == 0) {
            return null;
        }
        return {
            'responseBody': responseBody,
            'httpsStatus': httpsStatus
        };
    },
    /**
     * Set logging for other functions in the Script Include
     * 
     * @method setlogging
     * @verbosity {String} String value for the verbosity of the logs
     * @message {String} Message that is logged
     * @returns
     *
     */
    setlogging: function(verbosity, message) {
        if (gs.getProperty(NestedLVLSync.PROPERTIES.LOGGING === "true")) return;
        switch (verbosity) {
            case "error":
                gs.error(message);
                break;
            case "warn":
                gs.warn(message);
                break;
            case "info":
                gs.info(message);
                break;
            case "debug":
                gs.debug(message);
                break;
            default:
                break;
        }
    },
    type: 'NestedLVLSync'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>magda.gursca</sys_created_by>
        <sys_created_on>2024-02-27 07:50:52</sys_created_on>
        <sys_id>f13aa2a6972c0210369dff76f053afd7</sys_id>
        <sys_mod_count>309</sys_mod_count>
        <sys_name>NestedLVLSync</sys_name>
        <sys_package display_value="Synchronize CMDB Data Between Instances" source="8078517597500210369dff76f053afa0">8078517597500210369dff76f053afa0</sys_package>
        <sys_policy/>
        <sys_scope display_value="Synchronize CMDB Data Between Instances">8078517597500210369dff76f053afa0</sys_scope>
        <sys_update_name>sys_script_include_f13aa2a6972c0210369dff76f053afd7</sys_update_name>
        <sys_updated_by>magda.gursca</sys_updated_by>
        <sys_updated_on>2024-03-08 13:15:41</sys_updated_on>
    </sys_script_include>
</record_update>
